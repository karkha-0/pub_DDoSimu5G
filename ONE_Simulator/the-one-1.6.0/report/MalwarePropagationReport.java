/* 
 * Copyright 2024, Lund Univeristy, EIT, Security and Networks group
 * Released under GPLv3. See LICENSE.txt for details. 
 */

package report;

import org.json.JSONArray;
import org.json.JSONObject;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;

import core.Settings;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Map;
import java.util.function.Consumer;

import routing.D2DRouter;
import routing.EpidemicRouter;
import routing.InfectionRouter;

/**
 * JSON Contact details and malware infection data reporting classs
 */
public class MalwarePropagationReport extends Report {

private String reportDir;
//private String scenarioName;

    public MalwarePropagationReport() {
        init();  // Ensure parent class initialization, including settings like reportDir

        // Fetch reportDir from settings
        Settings reportSettings = new Settings("Report");
        this.reportDir = reportSettings.getSetting("reportDir");
        Settings scenarioSettings = new Settings("Scenario");
        //this.scenarioName = scenarioSettings.getSetting("name");

        if (this.reportDir == null || this.reportDir.isEmpty()) {
            this.reportDir = "reports";  // Default to "reports" if not set
        }
    }

    @Override
    public void init() {
    }

    @Override
    public void done() {
        try {

            // Trying to fix memory issue
            closeLogWriters();
            //JSONObject consolidatedReport = createInfectionReport(reportDir);
            //writeJsonReport("MalwarePropagationReport.json", consolidatedReport);
            createInfectionReport(reportDir);
            
            //deleteTempLogFiles();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /*private void writeJsonReport(String fileName, JSONObject data) {
        try (FileWriter file = new FileWriter(reportDir + "/" + scenarioName + "_" + fileName)) {
            //String fullPath = (reportDir != null ? reportDir : "reports") + "/" + fileName;
            //FileWriter file = new FileWriter(fullPath);
            file.write(data.toString(4));  // Pretty-print JSON with an indent factor of 4
            file.flush();
            file.close();
        } catch (IOException e) {
            e.printStackTrace();
        } 
    }*/

    public void closeLogWriters() {

        Map<String, JsonGenerator> writers = null;

        if (D2DRouter.getLogWriters() != null) {
            writers = D2DRouter.getLogWriters();
        }
        else if (EpidemicRouter.getLogWriters() != null) {
            writers = EpidemicRouter.getLogWriters();
        }
        else if (InfectionRouter.getLogWriters() != null) {
            writers = InfectionRouter.getLogWriters();
        }
        
        if (writers.get("infectionLogWriter") != null) {
            try {
                writers.get("infectionLogWriter").writeEndArray(); // Close the JSON array
                writers.get("infectionLogWriter").close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        if (writers.get("malwareLogWriter") != null) {
            try {
                writers.get("malwareLogWriter").writeEndArray();
                writers.get("malwareLogWriter").close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        if (writers.get("contactLogWriter") != null) {
            try {
                writers.get("contactLogWriter").writeEndArray();
                writers.get("contactLogWriter").close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    public void createInfectionReport(String reportDir) {
        ObjectMapper mapper = new ObjectMapper();
        File consolidatedReport = new File(reportDir + "/MalwarePropagationReport.json");
    
        try (JsonGenerator generator = mapper.getFactory().createGenerator(new FileWriter(consolidatedReport))) {
            generator.useDefaultPrettyPrinter(); // For pretty formatting
            generator.writeStartObject(); // Start the root object
    
            // Process each file
            writeSection(generator, reportDir + "/infection_log.json", "infectionData", mapper);
            writeSection(generator, reportDir + "/malware_log.json", "malwarePropagationData", mapper);
            writeSection(generator, reportDir + "/contact_log.json", "contactDetailsData", mapper);
    
            generator.writeEndObject(); // Close the root object
            System.out.println("Consolidated report created successfully.");
        } catch (IOException e) {
            System.err.println("Error during consolidation: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    
    private void writeSection(JsonGenerator generator, String filePath, String fieldName, ObjectMapper mapper) throws IOException {
        File file = new File(filePath);
    
        if (!file.exists()) {
            System.err.println("File does not exist: " + file.getName());
            return;
        }
            


        generator.writeFieldName(fieldName); // Write the field name
        generator.writeStartArray(); // Start an array for this section
    
        // Stream the contents of the file into the array
        processLargeFile(file, mapper, entry -> {
            try {
                generator.writeObject(entry);
            } catch (IOException e) {
                System.err.println("Error writing object to generator: " + e.getMessage());
                e.printStackTrace();
            }
        });
    
        generator.writeEndArray(); // End the array
    }
    
    
    private void processLargeFile(File file, ObjectMapper mapper, Consumer<Object> consumer) throws IOException {
        try (JsonParser parser = mapper.getFactory().createParser(file)) {
            parser.nextToken(); // Start array
            while (parser.nextToken() != JsonToken.END_ARRAY) {
                Object entry = mapper.readValue(parser, Object.class);
                consumer.accept(entry);
            }
        }
    }

    private void deleteTempLogFiles() {
        String[] logFiles = {
            reportDir + "/infection_log.json",
            reportDir + "/malware_log.json",
            reportDir + "/contact_log.json"
        };
    
        for (String logFile : logFiles) {
            File file = new File(logFile);
            if (file.exists() && file.delete()) {
                System.out.println("Deleted log file: " + logFile);
            } else {
                System.err.println("Failed to delete log file: " + logFile);
            }
        }
    }
    

}
