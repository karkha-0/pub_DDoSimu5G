[General]
description = "Base configuration, do not run this config!"
############### Simualtion configuration ##################
sim-time-limit = 120s 
warmup-period = 1s 
seed-set = ${repetition} 
network = NetworkMertics # This is because i added the ned files needed through the project properties
#image-path = ../image/background
# --------------------------------------------------------# 

############### Network configuration ##################
*.configurator.config = xmldoc("CaseID/config/demo.xml") 
# --------------------------------------------------------# 

############### Statistics ##################
# avgServedBlocksUl -> Provides an indication of how many uplink data blocks the gNodeB successfully handled, which can be used to infer the load and efficiency of the uplink transmission.
#**.avgServedBlocksUl*.vector-recording = false
#**.avgServedBlocksDl*.vector-recording = false

#**.measuredSinrUl*.vector-recording = false
#**.measuredSinrDl*.vector-recording = false

**.bgTrafficGenerator*.**.scalar-recording = false
**.bgTrafficGenerator*.**.vector-recording = false

**.servingCell*.vector-recording = true
**.servedUE*.vector-recording = true
**.servedUELTH*.vector-recording = true
**.testMsg*.vector-recording = true
**.simNodeIds*.vector-recording = true


**.macBufferOverFlowDl*.vector-recording = true
**.macBufferOverflowUl*.vector-recording = true


#**.scalar-recording = false
#**.vector-recording = false

# include itervars in the output file names 
output-scalar-file = ../${resultdir}/${configname}/Moving/${iterationvars}-${repetition}.sca 
output-vector-file = ../${resultdir}/${configname}/Moving/${iterationvars}-${repetition}.vec 
# --------------------------------------------------------# 

############### General parameters  ##################
**.amcType = "NRAmc" 
**.targetBler = 0.01 
**.blerShift = 5   
**.downlink_interference = true
**.uplink_interference = true
**.fbPeriod = 40   # reports CQI every 40ms

# Transmission Power Adjustment
#**.ueTxPower = 20 # 20 dBm (100 mW)
#**.eNodeBTxPower = 40 # 40 dBm (10 W)
**.ueTxPower = 26
**.eNodeBTxPower = 40

# Path Loss Model
**.propagationModel = "LogNormalShadowingModel"
**.alpha = 3.5  # Adjust path loss exponent
**.shadowingDeviation = 4.0  # Adjust shadowing deviation

############### CA configuration ################# 
*.carrierAggregation.numComponentCarriers = 1
*.carrierAggregation.componentCarrier[0].numerologyIndex = ${u=1}
*.carrierAggregation.componentCarrier[0].carrierFrequency = 3.5GHz
*.carrierAggregation.componentCarrier[0].numBands = ${numRbs=273}

# Floorplan definition 
**.mobility.constraintAreaMaxX = 2000m 
**.mobility.constraintAreaMaxY = 2000m 
**.mobility.constraintAreaMinX = 0m 
**.mobility.constraintAreaMinY = 0m 
**.mobility.constraintAreaMinZ = 0m 
**.mobility.constraintAreaMaxZ = 0m 
**.mobility.initFromDisplayString = false 
# --------------------------------------------------------# 
 

# --------------------------------------------------------# 
# Config "Many-UEs-Single-Cell" 
# 
#   
# 
# 
[Config NetworkMetrics-Many-UEs-Single-Cell]
extends = General
description = "Single gNodeB with a 1,5,10,15,20,50,100,150 or 200 UEs"

# variable number of UEs 
*.numUe = ${numUes=1,5,10,15,20,50,100,150,200}


*.gnb.cellularNic.numCarriers = 1
*.gnb.cellularNic.channelModel[0].componentCarrierIndex = 0
*.ue[*].cellularNic.numCarriers = 1
*.ue[*].cellularNic.nrChannelModel[0].componentCarrierIndex = 0

# gNodeB position 
*.gnb.mobility.initialX = 1000m 
*.gnb.mobility.initialY = 1000m  

# iUPF position
*.iUpf.mobility.initialX = 1005m # Close to the gNodeB
*.iUpf.mobility.initialY = 1005m # Close to the gNodeB

# UEs position - Moving nodes
*.ue[*].mobility.typename = "LinearMobility" 
*.ue[*].mobility.initialX = uniform(0m,2000m)
*.ue[*].mobility.initialY = uniform(0m,2000m)
*.ue[*].mobility.speed = uniform(2mps,80mps)

# UEs position - Stationary 
#*.ue[0].mobility.typename = "StationaryMobility"
#*.ue[0].mobility.initialX = 5m
#*.ue[0].mobility.initialY = 1000m
#
#*.ue[1].mobility.typename = "StationaryMobility"
#*.ue[1].mobility.initialX = 250m
#*.ue[1].mobility.initialY = 1150m
#
#*.ue[2].mobility.typename = "StationaryMobility"
#*.ue[2].mobility.initialX = 500m
#*.ue[2].mobility.initialY = 1300m
#
#*.ue[3].mobility.typename = "StationaryMobility"
#*.ue[3].mobility.initialX = 750m
#*.ue[3].mobility.initialY = 1400m
#
#*.ue[4].mobility.typename = "StationaryMobility"
#*.ue[4].mobility.initialX = 1005m
#*.ue[4].mobility.initialY = 1500m

# connect the UE's NIC (NR side) to the corresponding serving gNB 
*.ue[*].macCellId = 0 
*.ue[*].masterId = 0 
*.ue[*].nrMacCellId = 1 
*.ue[*].nrMasterId = 1 
**.dynamicCellAssociation = true
**.enableHandover = true

# --------------------------------------------------------# 
# Config Data traffic 
# 
#   
# 
# 
################ Data Traffic  ##################
# one application for each user
*.ue[*].numApps = 1

# the amount of applications on server should be equal to (numUEs)*(ue[*].numApps) 
*.server.numApps = ${numUes}

#============= Application Setup =============VoIP-DL


#*.ue[*].app[*].typename = "VoIPReceiver"
#*.ue[*].app[*].localPort = 3000
#
#*.server.app[*].typename = "VoIPSender"
#*.server.app[*].PacketSize = 100
#*.server.app[*].packetLength = 1200B
#*.server.app[*].productionInterval = exponential(100us)
#*.server.app[*].sampling_time = 0.02s
#*.server.app[*].destAddress = "ue[" + string(ancestorIndex(0)) + "]"
#*.server.app[*].destPort = 3000 
#*.server.app[*].localPort = 3088+ancestorIndex(0) 

#============= Application Setup =============VoIP-UL
#*.server.app[*].typename = "CbrReceiver"
#*.server.app[*].localPort = 3000+ancestorIndex(0)
#
#*.ue[*].app[*].PacketSize = 9600
## obtain the address of the client by reading its index in the array of udp Apps
#*.ue[*].app[*].destAddress = "server" 
#*.ue[*].app[*].localPort = 3088+ancestorIndex(0)
#*.ue[*].app[*].typename = "CbrSender"
#*.ue[*].app[*].startTime = uniform(0s,0.02s)
#*.ue[*].app[*].sendBytes = 10MiB
#
#
## flow definition
#*.ue[*].app[*].measurementStarter.typename = "FlowMeasurementStarter"
#*.ue[*].app[*].measurementStarter.flowName = "c1s1 or c1s2"
#*.ue[*].app[*].measurementStarter.measure = "elapsedTime or queueingTime"
#
#*.server.app[*].measurementRecorder.typename = "FlowMeasurementRecorder"
#*.server.app[*].measurementRecorder.flowName = "c1s1 or c1s2 or c2s1 or c2s2"
#*.server.app[*].measurementRecorder.measure = "elapsedTime or queueingTime"

#============= Application Setup =============VoIP
#*.ue[*].app[*].typename = "VoIPReceiver"
#*.ue[*].app[*].localPort = 3000
#
#*.server.app[*].typename = "VoIPSender"
#*.server.app[*].localPort = 3088+ancestorIndex(0)
#*.server.app[*].destAddress = "ue[" + string(ancestorIndex(0)) + "]"
#*.server.app[*].destPort = 3000
#
## VoIPSender Parameters for Realistic VoIP Application
#*.server.app[*].PacketSize = 160  # Size of the packets in bytes, typical for G.711 codec
#*.server.app[*].shape_talk = 1.5  # Shape parameter for talk burst duration, adjusted for realism
#*.server.app[*].scale_talk = 1.0  # Scale parameter for talk burst duration, adjusted for realism
#*.server.app[*].shape_sil = 1.2  # Shape parameter for silence duration, adjusted for realism
#*.server.app[*].scale_sil = 1.0  # Scale parameter for silence duration, adjusted for realism
#*.server.app[*].is_talk = true  # Initial state (talking)
#*.server.app[*].sampling_time = 0.02s  # Sampling time interval, typical for 20 ms frames
#*.server.app[*].startTime = uniform(0s,0.02s)  # Start time of the VoIPSender
#*.server.app[*].silences = true  # Include silence periods
#*.server.app[*].tos = -1  # Type of Service (IPv4) / Traffic Class (IPv6)


#============= Application Setup =============Video
**.ue[0..].app[*].typename = "UdpVideoStreamClient"
**.ue[0..].app[*].serverAddress = "server"
**.ue[0..].app[*].localPort = 9999
**.ue[0..].app[*].serverPort = 3088
**.ue[0..].app[*].startTime = uniform(0s, 0.02s)

**.server.app[*].typename = "UdpVideoStreamServer"
**.server.app[*].videoSize = 200MiB
**.server.app[*].localPort = 3088+ancestorIndex(0)
**.server.app[*].sendInterval = ${send = 20ms}
#**.server.app[*].packetLen = ${packetLen = 100B, 200B, 300B, 400B, 500B, 600B, 700B, 800B, 900B, 1KiB, 1.5KiB, 2KiB, 5KiB }
#**.server.app[*].packetLen = ${packetLen = 100B, 300B, 400B}
**.server.app[*].packetLen = 1500B
**.mtu = 10000B

############# Background traffic configuration (DL only) #################

# the central gNB has a number of background UEs
*.gnb.cellularNic.bgTrafficGenerator[0].numBgUes = ${numBgUEs=1000}

# position of background UEs in the central cell
*.gnb.cellularNic.bgTrafficGenerator[0].bgUE[*].mobility.initialX = uniform(750m,1250m)
*.gnb.cellularNic.bgTrafficGenerator[0].bgUE[*].mobility.initialY = uniform(750m,1250m)

# --- Background UEs in the central cell --- #
*.gnb.cellularNic.bgTrafficGenerator[0].enablePeriodicCqiUpdate = true
*.gnb.cellularNic.bgTrafficGenerator[0].useProbabilisticCqi = ${probCqi=true}
*.gnb.cellularNic.bgTrafficGenerator[0].bgUE[*].trafficGeneratorType = "TrafficGeneratorCbr"
*.gnb.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.startTimeDl = uniform(0s,5s)
*.gnb.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.startTimeUl = uniform(0s,5s)
*.gnb.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.packetSizeDl = 1000B
*.gnb.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.packetSizeUl = 1000B
*.gnb.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.periodDl = 0.01s
*.gnb.cellularNic.bgTrafficGenerator[0].bgUE[*].generator.periodUl = 0.01s
