[General]

# This is the parent test config for the configs in Test-cases-001 folder 


description = "Base configuration, do not run this config!"
############### Simualtion configuration ##################
#sim-time-limit = 60s	 # 1 hour  
#sim-time-limit = ${simtime=10s,30s,60s,300s,600s,3600s,7200s,21600s,43200s,86400s,432000s}
sim-time-limit = ${simtime=3600s}
repeat = 10
warmup-period = 1s 
seed-set = ${repetition}


############### Statistics ##################
output-scalar-file-append = false
**.routingRecorder.enabled = false
record-eventlog = false


**.servingCell*.vector-recording = true
**.servedUE*.vector-recording = true
**.cellIdNodeIdCouple*.vector-recording = true
**.simNodeIds*.vector-recording = true
**.coord*.vector-recording = true
**.infectionEventTime*.vector-recording = true

**.scalar-recording = true
**.vector-recording = true	

# include itervars in the output file names 
output-scalar-file = ../../${resultdir}/${configname}/D2D_RWP_RUN8_Bengin2/${iterationvars}-repit-${repetition}-kaan.sca 
output-vector-file = ../../${resultdir}/${configname}/D2D_RWP_RUN8_Bengin2/${iterationvars}-repit-${repetition}-kaan.vec

allow-object-stealing-on-deletion = true

# Visualizer settings
*.visualizer.packetDropVisualizer.displayPacketDrops = true
*.visualizer.packetDelayVisualizer.displayPacketDelays = true
*.visualizer.throughputVisualizer.displayThroughput = true
*.visualizer.queueVisualizer.displayQueueLengths = true

# --------------------------------------------------------# 

# --------------------------------------------------------# 
# Config "Mutliple-Cell" 
# 
# 
# 
[Config Base-Configuration]
################ NED config setting #############
#network = networks.MultiCell
#network = Mobility # This is because i added the ned files needed through the project properties
network = Base_Config_5RAN
description = "Base configuration, do not run this config!"
# --------------------------------------------------------#

 
############### Network configuration ##################
*.configurator.config = xmldoc("config/hosts_net_config.xml") 
# --------------------------------------------------------# 

############### Internet Cloud config ##############
# delay and datarate and deop affect the size of packets and sampling time i am able to modify in my datatrafficcontroller. this was the issue I had all along
**.internetCloud.ipv4Delayer.config = xmldoc("config/Internetcloud_config_ext.xml")

############### General PHY parameters ##############
**.downlink_interference = true
**.uplink_interference = true
**.ueTxPower = 26
**.eNodeBTxPower = 46
**.targetBler = 0.01
**.blerShift = 5  
**.fbPeriod = 40   # reports CQI every 40ms

############# Floorplan parameters ################
**.mobility.constraintAreaMaxX = 2000m
**.mobility.constraintAreaMaxY = 2000m
**.mobility.constraintAreaMinX = 0m
**.mobility.constraintAreaMinY = 0m
**.mobility.constraintAreaMinZ = 0m
**.mobility.constraintAreaMaxZ = 0m
**.mobility.initFromDisplayString = false

############### BS position #################
*.gnb1.mobility.initialX = 500m
*.gnb1.mobility.initialY = 1500m
*.gnb2.mobility.initialX = 500m
*.gnb2.mobility.initialY = 500m
*.gnb3.mobility.initialX = 1500m
*.gnb3.mobility.initialY = 500m
*.gnb4.mobility.initialX = 1000m
*.gnb4.mobility.initialY = 1000m
*.gnb5.mobility.initialX = 1500m
*.gnb5.mobility.initialY = 1500m

############### CA configuration ################# 
*.carrierAggregation.numComponentCarriers = 1
*.carrierAggregation.componentCarrier[0].numerologyIndex = ${u=0}
*.carrierAggregation.componentCarrier[0].carrierFrequency = 2GHz
*.carrierAggregation.componentCarrier[0].numBands = ${numRbs=2}

*.gnb*.cellularNic.numCarriers = 1
*.gnb*.cellularNic.channelModel[0].componentCarrierIndex = 0
*.cbrUe[*].cellularNic.numCarriers = 1
*.cbrUe[*].cellularNic.nrChannelModel[0].componentCarrierIndex = 0
*.VidUe[*].cellularNic.numCarriers = 1
*.VidUe[*].cellularNic.nrChannelModel[0].componentCarrierIndex = 0

############### BS position #################
#*.gnb1.mobility.initialX = 1000m
#*.gnb1.mobility.initialY = 1000m

# --------------------------------------------------------# 
# Config "Mobility-dataset" 
# 	
#   
# 
# 
[Config TC-infectionDDoS-001-001]
extends = Base-Configuration
description = "5 gNodeBs, choose UE amount and simulation time"

############## UE configuration ##################
#*.numUe = ${numUEs=1,5,10,30,100,250,300,500,1000,3000,5000,10000}
*.numCbrUe = ${numCbrUEs=100}
*.numVidUe = ${numVidUEs=50}
#*.numUe = ${numUEs=10}

#**.ueIdOffset = ${repetition}*${numCbrUEs+numVidUEs}

# UEs associates to the best BS at the beginning of the simulation
*.cbrUe[*].macCellId = 0
*.cbrUe[*].masterId = 0
*.cbrUe[*].nrMacCellId = 1
*.cbrUe[*].nrMasterId = 1

*.VidUe[*].macCellId = 0
*.VidUe[*].masterId = 0
*.VidUe[*].nrMacCellId = 1
*.VidUe[*].nrMasterId = 1
#*.ue[*].nrMacCellId = intuniform(1,3) # randomly allocate the UEs to the NR cells
#*.ue[*].nrMasterId = intuniform(1,3)  # randomly allocate the UEs to the NR cells
**.dynamicCellAssociation = true
**.enableHandover = true

############ UEs position #################

######Standard mobility setting #####
#*.ue[*].mobility.typename = "RandomWaypointMobility"
##*.ue[*].mobility.initialX = uniform(0m,2000m)
##*.ue[*].mobility.initialY = uniform(2000m,0m)
#*.ue[*].mobility.speed = uniform(0mps,12mps) #speed random from 0 to 40 km/h
###

#### Makeing two types of mobility in same run ###
# If we have only 10 UEs then i can choose different mobility to some of them 
#*.ue[0..1].mobility.typename = "StationaryMobility"
#*.ue[0..1].mobility.speed = uniform(50mps, 150mps)

# Group 2: Remaining 90% of UEs with Random Waypoint Mobility
#*.ue[2..9].mobility.typename = "RandomWaypointMobility"
#*.ue[2..9].mobility.speed = uniform(100mps, 150mps)
###

##### Making a jumping node as a mobility anomily###
#*.ue[0].mobility.typename = "BonnMotionMobility"
#*.ue[0].mobility.traceFile = "anomilies/mobilityAnomilies/jump_pattern1UE.movements"

## In the anomilies/mobilityAnomilies/jump_pattern1UE.movements we describe the movement for one node
## <time1> <x1> <y1> <time2> <x2> <y2> ....
## <time1x> and <time2x> is the time it takes to reach next point and the time it stays at that point

#*.ue[1..9].mobility.typename = "RandomWaypointMobility"
#*.ue[1..9].mobility.speed = uniform(10mps, 20mps)
####

###### Getting movement from ONE #####
## We needed to use the script in script/mob_tracesConversionPy/fromONEtoSimu5G to turn json traces from ONE into Bonn format

*.cbrUe[*].mobility.typename = "BonnMotionMobility"
*.cbrUe[*].mobility.traceFile = "script/mob_tracesConversionPy/fromONEtoSimu5G/10MinsTraces.movements" # to run from Qtenv
#*.cbrUe[*].mobility.traceFile = "mob_tracesConversionPy/fromONEtoSimu5G/10MinsTraces.movements" # to run from script
#*.cbrUe[*].mobility.traceFile = "simulations/CaseID/script/mob_tracesConversionPy/fromONEtoSimu5G/10MinsTraces.movements" # to run from cmdenv

# Runs for 1 hour with D2D_RWP mobility and 100 nodes from ONE simulator
Â¤*.cbrUe[*].mobility.traceFile = "simulations/CaseID/script/mob_tracesConversionPy/fromONEtoSimu5G/1HourTracesRun8D2DRWP.movements" # to run from cmdenv
#*.cbrUe[*].mobility.traceFile = "simulations/CaseID/script/mob_tracesConversionPy/fromONEtoSimu5G/1HourTracesRun5D2DGAM.movements" # to run from cmdenv
#*.cbrUe[*].mobility.traceFile = "script/mob_tracesConversionPy/fromONEtoSimu5G/1HourTracesRun8D2DRWP.movements" # to run from Qtenv
*.cbrUe[*].mobility.nodeId = ancestorIndex(1)

*.VidUe[*].mobility.typename = "StationaryMobility"
#*.VidUe[*].mobility.speed = uniform(10mps, 20mps)


############### X2 configuration #################
## Note all gnbs need to be conncted to all if we going to place them randomly around the map
*.gnb1.numX2Apps = 4 #3
*.gnb2.numX2Apps = 4 #3
*.gnb3.numX2Apps = 4 #3
*.gnb5.numX2Apps = 4 #3
*.gnb4.numX2Apps = 4                                        
*.gnb*.x2App[*].server.localPort = 5000 + ancestorIndex(1)  # Server ports (x2App[0]=5000, x2App[1]=5001, ...)

*.gnb1.x2App[0].client.connectAddress = "gnb2%x2ppp0"
*.gnb1.x2App[1].client.connectAddress = "gnb4%x2ppp0"
*.gnb1.x2App[2].client.connectAddress = "gnb5%x2ppp0"
*.gnb1.x2App[3].client.connectAddress = "gnb3%x2ppp0" # this one to fix the note at the start

*.gnb2.x2App[0].client.connectAddress = "gnb1%x2ppp0"
*.gnb2.x2App[1].client.connectAddress = "gnb3%x2ppp1"
*.gnb2.x2App[2].client.connectAddress = "gnb4%x2ppp1"
*.gnb2.x2App[3].client.connectAddress = "gnb5%x2ppp0" # this one to fix the note at the start

*.gnb3.x2App[0].client.connectAddress = "gnb1%x2ppp1"
*.gnb3.x2App[1].client.connectAddress = "gnb4%x2ppp2"
*.gnb3.x2App[2].client.connectAddress = "gnb5%x2ppp1"
*.gnb3.x2App[3].client.connectAddress = "gnb2%x2ppp1" # this one to fix the note at the start

*.gnb4.x2App[0].client.connectAddress = "gnb1%x2ppp0"
*.gnb4.x2App[1].client.connectAddress = "gnb2%x2ppp1"
*.gnb4.x2App[2].client.connectAddress = "gnb3%x2ppp2"
*.gnb4.x2App[3].client.connectAddress = "gnb5%x2ppp2"

*.gnb5.x2App[0].client.connectAddress = "gnb1%x2ppp0"
*.gnb5.x2App[1].client.connectAddress = "gnb3%x2ppp2"
*.gnb5.x2App[2].client.connectAddress = "gnb4%x2ppp3"
*.gnb5.x2App[3].client.connectAddress = "gnb2%x2ppp0" # this one to fix the note at the start

#============= Application Setup =============
#**.ue[*].numApps = 2
## the amount of applications on server should be equal to (numUEs)*(ue[*].numApps) - actually if I do that then I need to have mutiple ports *.remoteServer.app[*].localPort = 3000 + index
## Other wise it can be that we need only one CBR as it is udp based and can have multiple connected to it  
##**.remoteServer.numApps = ${numUEs}
##**.remoteServer.numApps = 2
#**.remoteServer.numApps = 101

################# CBR application ###############
# CBR traffic setup for UEs as senders
**.cbrUe[*].numApps = 2
**.cbrUe[*].app[0].typename = "CbrSender"
**.cbrUe[*].app[0].PacketSize = 512               # Packet size for benign traffic
**.cbrUe[*].app[0].sampling_time = 1s             # Interval between packets
**.cbrUe[*].app[0].startTime = uniform(0s, 0.5s)  # Random start time for traffic
**.cbrUe[*].app[0].destAddress = "remoteServer"
#**.cbrUe[0..99].app[0].destPort = 3000+ancestorIndex(1)
**.cbrUe[*].app[0].destPort = 3000
**.cbrUe[*].app[0].localPort = 9999
**.cbrUe[*].app[0].finishTime = ${simtime}

# Remote server as the receiver
**.remoteServer.numApps = 2
**.remoteServer.app[0].typename = "CbrReceiver"
**.remoteServer.app[0].localPort = 3000
#**.remoteServer.app[*].localPort = 3000+ancestorIndex(0)

# CBR traffic setup for server as senders
**.remoteServer.app[1].typename = "CbrSender"
**.remoteServer.app[1].PacketSize = 100               # Packet size for benign traffic
**.remoteServer.app[1].sampling_time = 1s             # Interval between packets
**.remoteServer.app[1].startTime = uniform(0.5s, 1s)  # Random start time for traffic
**.remoteServer.app[1].destAddress = "cbrUe["+string(ancestorIndex(0)+1)+"]"
**.remoteServer.app[1].destPort = 5000
**.remoteServer.app[1].localPort = 8000+ancestorIndex(0)
**.remoteServer.app[1].finishTime = ${simtime}

# Remote UEs as the receiver
**.cbrUe[*].app[1].typename = "CbrReceiver"
**.cbrUe[*].app[1].localPort = 5000

**.mtu = 10000B

################ UDPSink###################
## UdpSourceApp traffic setup for UEs as senders
#*.ue[*].numApps = 1
#*.ue[*].app[0].typename = "UdpSourceApp"
#*.ue[*].app[0].source = "ue["+string(ancestorIndex(0))+"]"
#*.ue[*].app[0].source.packetLength = 1200B
#*.ue[*].app[0].source.productionInterval = exponential(100us)
#*.ue[*].app[0].io.destAddress = "remoteServer"
#*.ue[*].app[0].io.destPort = 1000
#
## destination application
#*.remoteServer.numApps = 1
#*.remoteServer.app[0].typename = "UdpSinkApp"
#*.remoteServer.app[0].io.localPort = 1000
#
## UDPSink traffic setup for server as senders
#**.remoteServer.app[1..100].typename = "UdpSourceApp"
#**.remoteServer.app[1..100].source.packetLength = 100B               # Packet size for benign traffic
#**.remoteServer.app[1..100].source.productionInterval = exponential(100us)             # Interval between packets
##**.remoteServer.app[1..100].startTime = uniform(0.5s, 1s)  # Random start time for traffic
#**.remoteServer.app[1..100].io.destAddress = "ue["+string(ancestorIndex(0)+1)+"]"
##**.ue[*].app[*].destPort = 3000+ancestorIndex(1)
#**.remoteServer.app[1..100].io.destPort = 5000
#**.remoteServer.app[1..100].io.localPort = 8000+ancestorIndex(0)
##**.remoteServer.app[1..100].finishTime = ${simtime}
#
## Remote UEs as the receiver
#**.ue[*].app[1].typename = "UdpSinkApp"
#**.ue[*].app[1].io.localPort = 5000

#######################Video DL ################################3
**.VidUe[*].numApps = 1
**.VidUe[*].app[*].typename = "UdpVideoStreamClient"
**.VidUe[*].app[*].serverAddress = "videoServer"
**.VidUe[*].app[*].localPort = 5555
**.VidUe[*].app[*].serverPort = 4088
**.VidUe[*].app[*].startTime = uniform(0s, 0.02s)

#**.cbrUe[*].app[2].typename = "UdpVideoStreamClient"
#**.cbrUe[*].app[2].serverAddress = "videoServer"
#**.cbrUe[*].app[2].localPort = 5555
#**.cbrUe[*].app[2].serverPort = 4088
#**.cbrUe[*].app[2].startTime = uniform(0s, 0.02s)

#**.ue[*].numApps = 1
#**.ue[*].app[*].typename = "UdpVideoStreamClient"
#**.ue[*].app[*].serverAddress = "videoServer"
#**.ue[*].app[*].localPort = 5555
#**.ue[*].app[*].serverPort = 4088
#**.ue[*].app[*].startTime = uniform(0s, 0.02s)


**.videoServer.numApps = 1
**.videoServer.app[*].typename = "UdpVideoStreamServer"
**.videoServer.app[*].videoSize = 200MiB
**.videoServer.app[*].localPort = 4088
#**.server.app[*].sendInterval = 100ms
#**.videoServer.app[*].sendInterval = 15ms
**.videoServer.app[*].sendInterval = 100ms
**.videoServer.app[*].packetLen = 1KiB







