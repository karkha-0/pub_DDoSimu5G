[General]
description = "Base configuration, do not run this config!"
############### Simualtion configuration ##################
#sim-time-limit = 60s	 # 1 hour  
sim-time-limit = ${simtime=10s,30s,60s,300s,600s,3600s,7200s,21600s,43200s,86400s,432000s}
repeat = 10
warmup-period = 1s 
seed-set = ${repetition}


############### Statistics ##################
output-scalar-file-append = false
**.routingRecorder.enabled = false
record-eventlog = false


**.servingCell*.vector-recording = true
**.servedUE*.vector-recording = true
**.cellIdNodeIdCouple*.vector-recording = true
**.simNodeIds*.vector-recording = true
**.coord*.vector-recording = true
**.infectionEventTime*.vector-recording = true

**.scalar-recording = true
**.vector-recording = true	

# include itervars in the output file names 
output-scalar-file = ../../${resultdir}/${configname}/${iterationvars}-repit-${repetition}.sca 
output-vector-file = ../../${resultdir}/${configname}/${iterationvars}-repit-${repetition}.vec

allow-object-stealing-on-deletion = true

# --------------------------------------------------------# 

# --------------------------------------------------------# 
# Config "Mutliple-Cell" 
# 
# 
# 
[Config Base-Configuration]
################ NED config setting #############
#network = networks.MultiCell
#network = Mobility # This is because i added the ned files needed through the project properties
network = Base_Config_5RAN
description = "Base configuration, do not run this config!"
# --------------------------------------------------------#

 
############### Network configuration ##################
*.configurator.config = xmldoc("config/demo.xml") 
# --------------------------------------------------------# 

############### Internet Cloud config ##############
**.internetCloud.ipv4Delayer.config = xmldoc("config/Internetcloud_config_test.xml")

############### General PHY parameters ##############
**.downlink_interference = true
**.uplink_interference = true
**.ueTxPower = 26
**.eNodeBTxPower = 46
**.targetBler = 0.01
**.blerShift = 5  
**.fbPeriod = 40   # reports CQI every 40ms

############# Floorplan parameters ################
**.mobility.constraintAreaMaxX = 2000m
**.mobility.constraintAreaMaxY = 2000m
**.mobility.constraintAreaMinX = 0m
**.mobility.constraintAreaMinY = 0m
**.mobility.constraintAreaMinZ = 0m
**.mobility.constraintAreaMaxZ = 0m
**.mobility.initFromDisplayString = false

############### CA configuration ################# 
*.carrierAggregation.numComponentCarriers = 1
*.carrierAggregation.componentCarrier[0].numerologyIndex = ${u=0}
*.carrierAggregation.componentCarrier[0].carrierFrequency = 2GHz
*.carrierAggregation.componentCarrier[0].numBands = ${numRbs=2}

*.gnb*.cellularNic.numCarriers = 1
*.gnb*.cellularNic.channelModel[0].componentCarrierIndex = 0
*.ue[*].cellularNic.numCarriers = 1
*.ue[*].cellularNic.nrChannelModel[0].componentCarrierIndex = 0

############### BS position #################
#*.gnb1.mobility.initialX = 1000m
#*.gnb1.mobility.initialY = 1000m

# --------------------------------------------------------# 
# Config "Mobility-dataset" 
# 	
#   
# 
# 
[Config TC-Base-MobTraces-Base5RAN-001]
extends = Base-Configuration
description = "5 gNodeBs, choose UE amount and simulation time"

############## UE configuration ##################
#*.numUe = ${numUEs=1,5,10,30,100,250,300,500,1000,3000,5000,10000}
*.numUe = ${numUEs=100}
#*.numUe = ${numUEs=10}

**.ueIdOffset = ${repetition}*${numUEs}

# UEs associates to the best BS at the beginning of the simulation
*.ue[*].macCellId = 0
*.ue[*].masterId = 0
*.ue[*].nrMacCellId = 1
*.ue[*].nrMasterId = 1
#*.ue[*].nrMacCellId = intuniform(1,3) # randomly allocate the UEs to the NR cells
#*.ue[*].nrMasterId = intuniform(1,3)  # randomly allocate the UEs to the NR cells
**.dynamicCellAssociation = true
**.enableHandover = true

############ UEs position #################

######Standard mobility setting #####
#*.ue[*].mobility.typename = "RandomWaypointMobility"
##*.ue[*].mobility.initialX = uniform(0m,2000m)
##*.ue[*].mobility.initialY = uniform(2000m,0m)
#*.ue[*].mobility.speed = uniform(0mps,12mps) #speed random from 0 to 40 km/h
###

#### Makeing two types of mobility in same run ###
# If we have only 10 UEs then i can choose different mobility to some of them 
#*.ue[0..1].mobility.typename = "StationaryMobility"
#*.ue[0..1].mobility.speed = uniform(50mps, 150mps)

# Group 2: Remaining 90% of UEs with Random Waypoint Mobility
#*.ue[2..9].mobility.typename = "RandomWaypointMobility"
#*.ue[2..9].mobility.speed = uniform(100mps, 150mps)
###

##### Making a jumping node as a mobility anomily###
#*.ue[0].mobility.typename = "BonnMotionMobility"
#*.ue[0].mobility.traceFile = "anomilies/mobilityAnomilies/jump_pattern1UE.movements"

## In the anomilies/mobilityAnomilies/jump_pattern1UE.movements we describe the movement for one node
## <time1> <x1> <y1> <time2> <x2> <y2> ....
## <time1x> and <time2x> is the time it takes to reach next point and the time it stays at that point

#*.ue[1..9].mobility.typename = "RandomWaypointMobility"
#*.ue[1..9].mobility.speed = uniform(10mps, 20mps)
####

###### Getting movement from ONE #####
## We needed to use the script in script/mob_tracesConversionPy/fromONEtoSimu5G to turn json traces from ONE into Bonn format

*.ue[*].mobility.typename = "BonnMotionMobility"
#*.ue[*].mobility.traceFile = "script/mob_tracesConversionPy/fromONEtoSimu5G/10MinsTraces.movements" # to run from Qtenv
#*.ue[*].mobility.traceFile = "mob_tracesConversionPy/fromONEtoSimu5G/10MinsTraces.movements" # to run from script
*.ue[*].mobility.traceFile = "simulations/CaseID/script/mob_tracesConversionPy/fromONEtoSimu5G/10MinsTraces.movements" # to run from cmdenv
*.ue[*].mobility.nodeId = ancestorIndex(1)


############### X2 configuration #################
## Note all gnbs need to be conncted to all if we going to place them randomly around the map
*.gnb1.numX2Apps = 4 #3
*.gnb2.numX2Apps = 4 #3
*.gnb3.numX2Apps = 4 #3
*.gnb5.numX2Apps = 4 #3
*.gnb4.numX2Apps = 4                                        
*.gnb*.x2App[*].server.localPort = 5000 + ancestorIndex(1)  # Server ports (x2App[0]=5000, x2App[1]=5001, ...)

*.gnb1.x2App[0].client.connectAddress = "gnb2%x2ppp0"
*.gnb1.x2App[1].client.connectAddress = "gnb4%x2ppp0"
*.gnb1.x2App[2].client.connectAddress = "gnb5%x2ppp0"
*.gnb1.x2App[3].client.connectAddress = "gnb3%x2ppp0" # this one to fix the note at the start

*.gnb2.x2App[0].client.connectAddress = "gnb1%x2ppp0"
*.gnb2.x2App[1].client.connectAddress = "gnb3%x2ppp1"
*.gnb2.x2App[2].client.connectAddress = "gnb4%x2ppp1"
*.gnb2.x2App[3].client.connectAddress = "gnb5%x2ppp0" # this one to fix the note at the start

*.gnb3.x2App[0].client.connectAddress = "gnb1%x2ppp1"
*.gnb3.x2App[1].client.connectAddress = "gnb4%x2ppp2"
*.gnb3.x2App[2].client.connectAddress = "gnb5%x2ppp1"
*.gnb3.x2App[3].client.connectAddress = "gnb2%x2ppp1" # this one to fix the note at the start

*.gnb4.x2App[0].client.connectAddress = "gnb1%x2ppp0"
*.gnb4.x2App[1].client.connectAddress = "gnb2%x2ppp1"
*.gnb4.x2App[2].client.connectAddress = "gnb3%x2ppp2"
*.gnb4.x2App[3].client.connectAddress = "gnb5%x2ppp2"

*.gnb5.x2App[0].client.connectAddress = "gnb1%x2ppp0"
*.gnb5.x2App[1].client.connectAddress = "gnb3%x2ppp2"
*.gnb5.x2App[2].client.connectAddress = "gnb4%x2ppp3"
*.gnb5.x2App[3].client.connectAddress = "gnb2%x2ppp0" # this one to fix the note at the start

#============= Application Setup =============
**.ue[*].numApps = 1
# the amount of applications on server should be equal to (numUEs)*(ue[*].numApps) - actually if I do that then I need to have mutiple ports *.remoteServer.app[*].localPort = 3000 + index
# Other wise it can be that we need only one CBR as it is udp based and can have multiple connected to it  
#**.remoteServer.numApps = ${numUEs}
**.remoteServer.numApps = 1

# CBR traffic setup for UEs
**.ue[*].app[*].typename = "CbrSender"
**.ue[*].app[*].PacketSize = 512               # Packet size for benign traffic
**.ue[*].app[*].sampling_time = 1s             # Interval between packets
**.ue[*].app[*].startTime = uniform(0s, 0.5s)  # Random start time for traffic
**.ue[*].app[*].destAddress = "remoteServer"
#**.ue[*].app[*].destPort = 3000+ancestorIndex(1)
**.ue[*].app[*].destPort = 3000
**.ue[*].app[*].localPort = 9999
**.ue[*].app[*].finishTime = ${simtime}

# Remote server as the traffic sink
**.remoteServer.app[*].typename = "CbrReceiver"
*.remoteServer.app[*].localPort = 3000
#**.remoteServer.app[*].localPort = 3000+ancestorIndex(0)
**.mtu = 10000B

