[General]
description = "Base configuration, do not run this config!"
############### Simualtion configuration ##################
sim-time-limit = ${simtime=3600s}
#sim-time-limit = ${simtime=600s}
repeat = 1
warmup-period = 1s 
seed-set = ${repetition}

############### Statistics ##################
output-scalar-file-append = false
**.routingRecorder.enabled = false
record-eventlog = false


**.servingCell*.vector-recording = true
**.servedUE*.vector-recording = true
**.cellIdNodeIdCouple*.vector-recording = true
**.simNodeIds*.vector-recording = true
**.coord*.vector-recording = true
**.infectionEventTime*.vector-recording = true

**.scalar-recording = true
**.vector-recording = true	

# include itervars in the output file names 
output-scalar-file = ../../../${resultdir}/Test-Cases-001/${configname}/frag_NoICMPerror-${iterationvars}-repit-${repetition}.sca 
output-vector-file = ../../../${resultdir}/Test-Cases-001/${configname}/frag_NoICMPerror-${iterationvars}-repit-${repetition}.vec

allow-object-stealing-on-deletion = true

# Visualizer settings
#*.visualizer.packetDropVisualizer.displayPacketDrops = true
#*.visualizer.packetDelayVisualizer.displayPacketDelays = true
#*.visualizer.throughputVisualizer.displayThroughput = true
#*.visualizer.queueVisualizer.displayQueueLengths = true

# --------------------------------------------------------# 

# --------------------------------------------------------# 
# Config "Mutliple-Cell" 
# 
[Config Base-Configuration]
################ NED config setting #############
network = Base_Config_5RAN
description = "Base configuration, do not run this config!"
# --------------------------------------------------------#

############### Network configuration ##################
*.configurator.config = xmldoc("../config/hosts_net_config.xml") 
# --------------------------------------------------------# 

############### Internet Cloud config ##############
**.internetCloud.ipv4Delayer.config = xmldoc("../config/Internetcloud_config_ext.xml")

############### General PHY parameters ##############
**.downlink_interference = true
**.uplink_interference = true
**.ueTxPower = 26
**.eNodeBTxPower = 46
**.targetBler = 0.01
**.blerShift = 5  
**.fbPeriod = 40   # reports CQI every 40ms

############# Floorplan parameters ################
**.mobility.constraintAreaMaxX = 2000m
**.mobility.constraintAreaMaxY = 2000m
**.mobility.constraintAreaMinX = 0m
**.mobility.constraintAreaMinY = 0m
**.mobility.constraintAreaMinZ = 0m
**.mobility.constraintAreaMaxZ = 0m
**.mobility.initFromDisplayString = false

############### BS position #################
*.gnb1.mobility.initialX = 500m
*.gnb1.mobility.initialY = 1500m
*.gnb2.mobility.initialX = 500m
*.gnb2.mobility.initialY = 500m
*.gnb3.mobility.initialX = 1500m
*.gnb3.mobility.initialY = 500m
*.gnb4.mobility.initialX = 1000m
*.gnb4.mobility.initialY = 1000m
*.gnb5.mobility.initialX = 1500m
*.gnb5.mobility.initialY = 1500m

############### CA configuration ################# 
*.carrierAggregation.numComponentCarriers = 1
*.carrierAggregation.componentCarrier[0].numerologyIndex = ${u=0}
*.carrierAggregation.componentCarrier[0].carrierFrequency = 2GHz
*.carrierAggregation.componentCarrier[0].numBands = ${numRbs=2}

*.gnb*.cellularNic.numCarriers = 1
*.gnb*.cellularNic.channelModel[0].componentCarrierIndex = 0
*.cbrUe[*].cellularNic.numCarriers = 1
*.cbrUe[*].cellularNic.nrChannelModel[0].componentCarrierIndex = 0
*.VidUe[*].cellularNic.numCarriers = 1
*.VidUe[*].cellularNic.nrChannelModel[0].componentCarrierIndex = 0


# --------------------------------------------------------# 
# Config "Base Config" 	
#
[Config TC-Base-DDoS-infec-5RAN-002]
extends = Base-Configuration
description = "5 gNodeBs, and network topology- do not run this config."

############## UE configuration ##################
*.numCbrUe = ${numCbrUEs=100}
*.numVidUe = ${numVidUEs=50}


# UEs associates to the best BS at the beginning of the simulation
*.cbrUe[*].macCellId = 0
*.cbrUe[*].masterId = 0
*.cbrUe[*].nrMacCellId = 1
*.cbrUe[*].nrMasterId = 1

*.VidUe[*].macCellId = 0
*.VidUe[*].masterId = 0
*.VidUe[*].nrMacCellId = 1
*.VidUe[*].nrMasterId = 1
**.dynamicCellAssociation = true
**.enableHandover = true

##### Video UEs stationary
*.VidUe[*].mobility.typename = "StationaryMobility"

#Added new, not sure if needed
*.VidUe[*].mobility.nodeId = ancestorIndex(1)

#*.cbrUe[*].mobility.typename = "BonnMotionMobility"
##*.cbrUe[*].mobility.traceFile = "../script/mob_tracesConversionPy/fromONEtoSimu5G/10MinsTraces.movements" # to run from Qtenv
#*.cbrUe[*].mobility.traceFile = "../script/mob_tracesConversionPy/fromONEtoSimu5G/10MinsTraces.movements" # to run from script


###### Getting infection metrics from ONE #####
#*.trafficController.infectionFilePath = "../../../ONE_Simulator/the-one-1.6.0/reports/D2D_MalwarePropagation/10MinsMalwarePropagationReport.json" # To run from Qtenv
#*.trafficController.infectionFilePath = "../../../ONE_Simulator/the-one-1.6.0/reports/D2D_MalwarePropagation/10MinsMalwarePropagationReport.json" # To run from script
#*.trafficController.infectionFilePath = "ONE_Simulator/the-one-1.6.0/reports/D2D_MalwarePropagation/10MinsMalwarePropagationReport.json" # To run from cmdenv
*.trafficController.infectionFilePath = "../config/infectionTraces/Test-cases-001_1h_D2D_MalwarePropagation_RWP_1-5ms/MalwarePropagationReport.json"

#### change traffic behaviour 
#*.trafficController.enableTrafficMod = true
*.trafficController.enableTrafficMod = ${ddosFlag=false,true}
#### if enableTrafficMod is enabled new packet size and sampling rate are taken in
*.trafficController.trafficMod_pktSize = 2048
*.trafficController.trafficMod_dataRate = 10

############### X2 configuration #################
## Note all gnbs need to be conncted to all if we going to place them randomly around the map
*.gnb1.numX2Apps = 4 #3
*.gnb2.numX2Apps = 4 #3
*.gnb3.numX2Apps = 4 #3
*.gnb5.numX2Apps = 4 #3
*.gnb4.numX2Apps = 4                                        
*.gnb*.x2App[*].server.localPort = 5000 + ancestorIndex(1)  # Server ports (x2App[0]=5000, x2App[1]=5001, ...)

*.gnb1.x2App[0].client.connectAddress = "gnb2%x2ppp0"
*.gnb1.x2App[1].client.connectAddress = "gnb4%x2ppp0"
*.gnb1.x2App[2].client.connectAddress = "gnb5%x2ppp0"
*.gnb1.x2App[3].client.connectAddress = "gnb3%x2ppp0" # this one to fix the note at the start

*.gnb2.x2App[0].client.connectAddress = "gnb1%x2ppp0"
*.gnb2.x2App[1].client.connectAddress = "gnb3%x2ppp1"
*.gnb2.x2App[2].client.connectAddress = "gnb4%x2ppp1"
*.gnb2.x2App[3].client.connectAddress = "gnb5%x2ppp0" # this one to fix the note at the start

*.gnb3.x2App[0].client.connectAddress = "gnb1%x2ppp1"
*.gnb3.x2App[1].client.connectAddress = "gnb4%x2ppp2"
*.gnb3.x2App[2].client.connectAddress = "gnb5%x2ppp1"
*.gnb3.x2App[3].client.connectAddress = "gnb2%x2ppp1" # this one to fix the note at the start

*.gnb4.x2App[0].client.connectAddress = "gnb1%x2ppp0"
*.gnb4.x2App[1].client.connectAddress = "gnb2%x2ppp1"
*.gnb4.x2App[2].client.connectAddress = "gnb3%x2ppp2"
*.gnb4.x2App[3].client.connectAddress = "gnb5%x2ppp2"

*.gnb5.x2App[0].client.connectAddress = "gnb1%x2ppp0"
*.gnb5.x2App[1].client.connectAddress = "gnb3%x2ppp2"
*.gnb5.x2App[2].client.connectAddress = "gnb4%x2ppp3"
*.gnb5.x2App[3].client.connectAddress = "gnb2%x2ppp0" # this one to fix the note at the start

#============= Application Setup =============
#
#
################# CBR application ###############
# CBR traffic setup for UEs as senders
**.cbrUe[*].numApps = 2
**.cbrUe[*].app[0].typename = "CbrSender"
**.cbrUe[*].app[0].PacketSize = 100               # Packet size for benign traffic
**.cbrUe[*].app[0].sampling_time = 10s             # Interval between packets
**.cbrUe[*].app[0].startTime = uniform(0s, 0.5s)  # Random start time for traffic
**.cbrUe[*].app[0].destAddress = "remoteServer"
#**.cbrUe[0..99].app[0].destPort = 3000+ancestorIndex(1)
**.cbrUe[*].app[0].destPort = 3000
**.cbrUe[*].app[0].localPort = 9999
**.cbrUe[*].app[0].finishTime = ${simtime}

# Remote server as the receiver
**.remoteServer.numApps = 2
**.remoteServer.app[0].typename = "CbrReceiver"
**.remoteServer.app[0].localPort = 3000
#**.remoteServer.app[*].localPort = 3000+ancestorIndex(0)

# CBR traffic setup for server as senders
**.remoteServer.app[1].typename = "CbrSender"
**.remoteServer.app[1].PacketSize = 100               # Packet size for benign traffic
**.remoteServer.app[1].sampling_time = 10s             # Interval between packets
**.remoteServer.app[1].startTime = uniform(0.5s, 1s)  # Random start time for traffic
**.remoteServer.app[1].destAddress = "cbrUe["+string(ancestorIndex(0)+1)+"]"
**.remoteServer.app[1].destPort = 5000
**.remoteServer.app[1].localPort = 8000+ancestorIndex(0)
**.remoteServer.app[1].finishTime = ${simtime}

# Remote UEs as the receiver
**.cbrUe[*].app[1].typename = "CbrReceiver"
**.cbrUe[*].app[1].localPort = 5000

**.mtu = 10000B

#######################Video DL ################################3
**.VidUe[*].numApps = 1
**.VidUe[*].app[0].typename = "UdpVideoStreamClient"
**.VidUe[*].app[0].serverAddress = "videoServer"
**.VidUe[*].app[0].localPort = 5555
**.VidUe[*].app[0].serverPort = 4000
**.VidUe[*].app[0].startTime = uniform(0s, 0.02s)

**.videoServer.numApps = 1
**.videoServer.app[*].typename = "UdpVideoStreamServer"
**.videoServer.app[*].videoSize = 200MiB
**.videoServer.app[*].localPort = 4000
#**.videoServer.app[*].destAddress = "VidUe["+string(ancestorIndex(0))+"]"
#**.videoServer.app[*].destPort = 5555
**.videoServer.app[*].sendInterval = 5ms
#**.videoServer.app[*].sendInterval = 100ms
#**.videoServer.app[*].packetLen = 10KiB
**.videoServer.app[*].packetLen = 1000B


[Config TC-frag-DDoS-infec-5RAN-002-stationary]
description = "All UEs stationary"
extends = TC-Base-DDoS-infec-5RAN-002
*.cbrUe[*].mobility.typename = StationaryMobility
*.cbrUe[*].mobility.nodeId = ancestorIndex(1)

[Config TC-frag-DDoS-infec-5RAN-002-slowMoving]
description = "Video UEs stationary, Other nodes constant slow movement"
extends = TC-Base-DDoS-infec-5RAN-002
###### Getting movement from ONE #####
## Use the script in script/mob_tracesConversionPy/fromONEtoSimu5G to turn json traces from ONE into Bonn format

# Runs for 1 hour with D2D_RWP mobility and 100 nodes from ONE simulator
*.cbrUe[*].mobility.typename = "BonnMotionMobility"
*.cbrUe[*].mobility.traceFile = "../config/infectionTraces/Test-cases-001_1h_D2D_MalwarePropagation_RWP_1-1ms/D2DMalwarePropagation_MobilityTraces.movements" # to run from script
*.cbrUe[*].mobility.nodeId = ancestorIndex(1)

[Config TC-frag-DDoS-infec-5RAN-002-MixedMoving]
description = "Video UEs stationary, Other nodes mixed moderate speed movement"
extends = TC-Base-DDoS-infec-5RAN-002
###### Getting movement from ONE #####
## Use the script in script/mob_tracesConversionPy/fromONEtoSimu5G to turn json traces from ONE into Bonn format

# Runs for 1 hour with D2D_RWP mobility and 100 nodes from ONE simulator
*.cbrUe[*].mobility.typename = "BonnMotionMobility"
*.cbrUe[*].mobility.traceFile = "../config/infectionTraces/Test-cases-001_1h_D2D_MalwarePropagation_RWP_1-5ms/D2DMalwarePropagation_MobilityTraces.movements" # to run from script
*.cbrUe[*].mobility.nodeId = ancestorIndex(1)





